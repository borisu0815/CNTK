# NOTE: GENERATED BY MODEL2CNTK
# 

command = TrainNetwork

precision = "float"; traceLevel = 1 ; deviceId = "auto"

rootDir = "." ; configDir = "$RootDir$" ; dataDir = "$RootDir$" ;
outputDir = "$rootDir$/Output" ;

modelPath = "$outputDir$/Models/@NETWORK_NAME@"
stderr = "$outputDir$/@NETWORK_NAME@_out"

parallelTrain = true

TrainNetwork = {
    action = "train"

    BrainScriptNetworkBuilder = {
        include "$configDir$/@NETWORK_NAME@.bs"

        imageShape  = @IMAGE_SIZE@
        labelDim    = @LABEL_SIZE@

        # inputs
        features    = Input {imageShape}
        labels      = Input {labelDim}

        # apply model to features
        z           = model (features)

        # loss and error computation
        @ROOT_NODES@

        # declare special nodes
        featureNodes    = (features)
        labelNodes      = (labels)
        criterionNodes  = (@SOFTMAX@)
        evaluationNodes = (@CLASSIFICATION@)
        outputNodes     = (@OUTPUT@)
    }

    SGD = {
        epochSize = 0
        minibatchSize = @MINIBATCH_SIZE@
        maxEpochs = @MAX_EPOCH@
        learningRatesPerMB = @LEARNING_RATE@
        momentumPerMB = @MOMENTUM@
        gradUpdateType = @GRAD_UPDATE_TYPE@
        L2RegWeight = @WEIGHT_DECAY@
        dropoutRate = @DROPOUT@
        numMBsToShowResult = @NUMBER_TO_SHOW_RESULT@

        parallelTrain = {
            parallelizationMethod = "DataParallelSGD"
            distributedMBReading = true
            parallelizationStartEpoch = 1
            DataParallelSGD = {
                gradientBits = 32
            }
        }
        autoAdjust = {
            autoAdjustLR = "AdjustAfterEpoch"
            reduceLearnRateIfImproveLessThan = @UPPER_LIMIT@
            learnRateDecreaseFactor = @DECREASE_FACTOR@
            learnRateAdjustInterval = @ADJUST_INTERVAL@
        }
    }

    reader = {
        readerType = "ImageReader"
        file = "$DataDir$/train_map.txt"
        randomize = "Auto"
        features = {
            width = 224
            height = 224
            channels = 3
            cropType = "Random"
            jitterType = "UniRatio"
            cropRatio = 0.46666:0.875
            hflip = true
            meanFile = "$ConfigDir$/ImageNet1K_mean.xml"
        }
        labels = {
            labelDim = 1000
        }
    }
}